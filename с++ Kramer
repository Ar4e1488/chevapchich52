#include <iostream>
#include <vector>

using namespace std;

double determinant(vector<vector<double>> matrix) {
    int n = matrix.size();
    if (n == 1) return matrix[0][0];
    if (n == 2) return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];

    double det = 0;
    for (int col = 0; col < n; ++col) {
        vector<vector<double>> submatrix(n - 1, vector<double>(n - 1));
        for (int i = 1; i < n; ++i) {
            int subcol = 0;
            for (int j = 0; j < n; ++j) {
                if (j == col) continue;
                submatrix[i - 1][subcol] = matrix[i][j];
                subcol++;
            }
        }
        det += (col % 2 == 0 ? 1 : -1) * matrix[0][col] * determinant(submatrix);
    }
    return det;
}

vector<double> cramer(vector<vector<double>> A, vector<double> B) {
    int n = A.size();
    double detA = determinant(A);
    vector<double> result(n);

    for (int i = 0; i < n; ++i) {
        vector<vector<double>> Ai = A;
        for (int j = 0; j < n; ++j) {
            Ai[j][i] = B[j];
        }
        result[i] = determinant(Ai) / detA;
    }

    return result;
}

int main() {
    vector<vector<double>> A = {{2, -1, 1}, {1, 3, -1}, {1, 0, 2}};
    vector<double> B = {0, 5, 3};

    vector<double> X = cramer(A, B);

    cout << "Solution: ";
    for (double x : X) {
        cout << x << " ";
    }
    cout << endl;

    return 0;
}
